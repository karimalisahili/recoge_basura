// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/game.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameService_CreateOrJoinGame_FullMethodName = "/game.GameService/CreateOrJoinGame"
	GameService_WaitForGameStart_FullMethodName = "/game.GameService/WaitForGameStart"
	GameService_GameUpdate_FullMethodName       = "/game.GameService/GameUpdate"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	// El jugador crea o se conecta al juego
	CreateOrJoinGame(ctx context.Context, in *CreateOrJoinRequest, opts ...grpc.CallOption) (*CreateOrJoinResponse, error)
	// El jugador se queda escuchando al servidor para saber cuando empezar
	WaitForGameStart(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WaitResponse], error)
	// Actualiza el juego
	GameUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameUpdateRequest, GameUpdateResponse], error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) CreateOrJoinGame(ctx context.Context, in *CreateOrJoinRequest, opts ...grpc.CallOption) (*CreateOrJoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrJoinResponse)
	err := c.cc.Invoke(ctx, GameService_CreateOrJoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) WaitForGameStart(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WaitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_WaitForGameStart_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WaitRequest, WaitResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_WaitForGameStartClient = grpc.ServerStreamingClient[WaitResponse]

func (c *gameServiceClient) GameUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameUpdateRequest, GameUpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[1], GameService_GameUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GameUpdateRequest, GameUpdateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_GameUpdateClient = grpc.BidiStreamingClient[GameUpdateRequest, GameUpdateResponse]

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility.
type GameServiceServer interface {
	// El jugador crea o se conecta al juego
	CreateOrJoinGame(context.Context, *CreateOrJoinRequest) (*CreateOrJoinResponse, error)
	// El jugador se queda escuchando al servidor para saber cuando empezar
	WaitForGameStart(*WaitRequest, grpc.ServerStreamingServer[WaitResponse]) error
	// Actualiza el juego
	GameUpdate(grpc.BidiStreamingServer[GameUpdateRequest, GameUpdateResponse]) error
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServiceServer struct{}

func (UnimplementedGameServiceServer) CreateOrJoinGame(context.Context, *CreateOrJoinRequest) (*CreateOrJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrJoinGame not implemented")
}
func (UnimplementedGameServiceServer) WaitForGameStart(*WaitRequest, grpc.ServerStreamingServer[WaitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WaitForGameStart not implemented")
}
func (UnimplementedGameServiceServer) GameUpdate(grpc.BidiStreamingServer[GameUpdateRequest, GameUpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GameUpdate not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}
func (UnimplementedGameServiceServer) testEmbeddedByValue()                     {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_CreateOrJoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateOrJoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_CreateOrJoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateOrJoinGame(ctx, req.(*CreateOrJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_WaitForGameStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).WaitForGameStart(m, &grpc.GenericServerStream[WaitRequest, WaitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_WaitForGameStartServer = grpc.ServerStreamingServer[WaitResponse]

func _GameService_GameUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).GameUpdate(&grpc.GenericServerStream[GameUpdateRequest, GameUpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_GameUpdateServer = grpc.BidiStreamingServer[GameUpdateRequest, GameUpdateResponse]

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrJoinGame",
			Handler:    _GameService_CreateOrJoinGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForGameStart",
			Handler:       _GameService_WaitForGameStart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GameUpdate",
			Handler:       _GameService_GameUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/game.proto",
}
